/*
 * Copyright 2020 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package proto3.simple;

option java_package = "com.squareup.wire.proto3.kotlin.simple";

// Hello service
service Hello {
  // hello
  rpc Hello(HelloRequest) returns (HelloResponse);
  // hello stream response
  rpc HelloStreamResponse(HelloRequest) returns (stream HelloResponse);
  // hello stream request
  rpc HelloStreamRequest(stream HelloRequest) returns (HelloResponse);
  // hello bidi
  rpc HelloBiDiStream(stream HelloRequest) returns (stream HelloResponse);
}
// Hello request
message HelloRequest {}
// Hello response
message HelloResponse {}

// This is an empty message
message EmptyMsg {}

// A very simple message with one string
message StringMsg {
  // leading doc comment
  string str = 1;
}

message MessageFieldMsg { // trailing docs for MessageFieldMsg
  StringMsg msg = 1; // trailing doc comment
}

// NestedMsg
message NestedMsg {
  // InnerMsg field
  InnerMsg msg = 1;

  // This message is nested inside another
  message InnerMsg {
    // InnerMsg field
    int32 i = 1;
  }
}

message EnumMsg {
  Enum enumeration = 1;
}

// Enum doc comment
enum Enum {
  // Default/unspecified
  UNSPECIFIED = 0;
  // Numero Uno!
  FIRST_VALUE = 1;
}

// List
message RecursiveList {
  // Recursive reference for list
  repeated RecursiveList list = 1;
}

// Maps
message RecursiveMap {
  // Recursive reference for map
  map<string, RecursiveMap> map = 1;
}

// OneOfMsg
message OneOfMsg {
  // oneof declaration
  oneof some_oneof {
    // oneof str_a
    string str_a = 1;
    // oneof str_b
    string str_b = 2;
  }
  // present
  string always_present = 3;
}
message Map {
  message InnerMap {
    // The number of completed RPCs for each peer.
    map<string, int32> inner_map_field = 1;
  }
  //  // The number of completed RPCs for each peer.
  //  map<string, int32> rpcs_by_peer = 1;
  //  // The number of RPCs that failed to record a remote peer.
  //  int32 num_failures = 2;
  map<string, InnerMap> inner_map_reference = 3;
}
